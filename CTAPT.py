#!/usr/bin/env python3
"""
üöÄ –£–°–¢–ê–ù–û–í–©–ò–ö –õ.–ò.–°.–ê.
–õ–æ–∫–∞–ª—å–Ω–∞—è –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –°–∏—Å—Ç–µ–º–∞ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
–í–µ—Ä—Å–∏—è: 1.618

–ê–≤—Ç–æ—Ä: –ù–∏–∫–∏—Ç–∞ –®–æ—Ä–∏–Ω (shorin-nikita)
GitHub: https://github.com/shorin-nikita/lisa
"""

import os
import secrets
import subprocess
import sys
import platform

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_header():
    print(f"""{Colors.HEADER}{Colors.BOLD}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                       –õ.–ò.–°.–ê. v1.618                         ‚ïë
‚ïë         –õ–æ–∫–∞–ª—å–Ω–∞—è –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –°–∏—Å—Ç–µ–º–∞ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
{Colors.ENDC}""")

def run_command(cmd, check=True, capture_output=False, log_cmd=True):
    try:
        if log_cmd and not capture_output:
            print(f"   üîß –í—ã–ø–æ–ª–Ω—è—é: {cmd}")
        result = subprocess.run(cmd, shell=True, capture_output=capture_output,
                               text=True, check=check, timeout=120)
        if capture_output:
            return result.stdout.strip()
        return True
    except Exception as e:
        if not capture_output:
            print(f"{Colors.FAIL}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.ENDC}")
        return False

def check_system_requirements():
    print(f"\n{Colors.OKBLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...{Colors.ENDC}")
    requirements = [
        ('docker', 'Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install docker.io'),
        ('python3', 'Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install python3'),
        ('git', 'Git –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install git')
    ]
    for cmd, error_msg in requirements:
        if not run_command(f"which {cmd}", capture_output=True, check=False, log_cmd=False):
            print(f"{Colors.FAIL}‚ùå {error_msg}{Colors.ENDC}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if not run_command("docker ps", check=False, capture_output=True, log_cmd=False):
        print(f"{Colors.WARNING}‚ö†Ô∏è  Docker —Ç—Ä–µ–±—É–µ—Ç sudo –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker{Colors.ENDC}")
        print(f"   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo usermod -aG docker $USER && newgrp docker")
        return False
    
    print(f"{Colors.OKGREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ{Colors.ENDC}")
    return True

def detect_gpu_type():
    print(f"\n{Colors.OKBLUE}üéÆ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ GPU –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...{Colors.ENDC}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ NVIDIA
    nvidia_check = run_command("nvidia-smi", check=False, capture_output=True, log_cmd=False)
    if nvidia_check and "NVIDIA" in str(nvidia_check):
        print(f"{Colors.OKGREEN}‚úÖ –ù–∞–π–¥–µ–Ω NVIDIA GPU{Colors.ENDC}")
        return "gpu-nvidia"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ AMD –Ω–∞ Linux
    if platform.system() == "Linux":
        amd_check = run_command("lspci | grep -i amd", check=False, capture_output=True, log_cmd=False)
        if amd_check and "amd" in str(amd_check).lower():
            print(f"{Colors.OKGREEN}‚úÖ –ù–∞–π–¥–µ–Ω AMD GPU{Colors.ENDC}")
            return "gpu-amd"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Apple Silicon
    if platform.system() == "Darwin":
        mac_check = run_command("system_profiler SPHardwareDataType | grep 'Chip'", 
                               check=False, capture_output=True, log_cmd=False)
        if mac_check and any(x in str(mac_check) for x in ["M1", "M2", "M3"]):
            print(f"{Colors.OKGREEN}‚úÖ –ù–∞–π–¥–µ–Ω Apple Silicon (CPU –ø—Ä–æ—Ñ–∏–ª—å){Colors.ENDC}")
            return "cpu"
    
    print(f"{Colors.WARNING}‚ö†Ô∏è  GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω CPU –ø—Ä–æ—Ñ–∏–ª—å{Colors.ENDC}")
    return "cpu"

def setup_firewall():
    print(f"\n{Colors.OKBLUE}üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall...{Colors.ENDC}")
    commands = [
        "sudo ufw --force enable",
        "sudo ufw allow 80/tcp",
        "sudo ufw allow 443/tcp",
        "sudo ufw allow ssh",
        "sudo ufw --force reload"
    ]
    
    for cmd in commands:
        if not run_command(cmd, check=False, log_cmd=False):
            print(f"{Colors.WARNING}‚ö†Ô∏è  Firewall –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω—É–∂–Ω—ã sudo –ø—Ä–∞–≤–∞){Colors.ENDC}")
            print(f"   –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return False
    
    print(f"{Colors.OKGREEN}‚úÖ Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ø–æ—Ä—Ç—ã 80, 443 –æ—Ç–∫—Ä—ã—Ç—ã){Colors.ENDC}")
    return True

def validate_domain(domain):
    import re
    pattern = r'^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?\.[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?(\.[a-zA-Z]{2,})+$'
    return re.match(pattern, domain) is not None

def validate_email(email):
    import re
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(pattern, email):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—â–∏–µ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    valid_tlds = ['com', 'net', 'org', 'edu', 'gov', 'ru', 'uk', 'de', 'jp', 
                  'fr', 'au', 'us', 'ca', 'cn', 'br', 'in', 'mx', 'es', 'it',
                  'nl', 'pl', 'se', 'tr', 'ch', 'be', 'at', 'dk', 'fi', 'no',
                  'io', 'co', 'me', 'info', 'biz', 'pro', 'name', 'mobi', 'asia']
    domain = email.split('@')[1]
    tld = domain.split('.')[-1].lower()
    
    if tld not in valid_tlds:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –î–æ–º–µ–Ω '{tld}' –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–æ–±—ã—á–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π email!{Colors.ENDC}")
        return False
    
    return True

def get_validated_input(prompt, validator, error_msg="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", allow_skip=False):
    while True:
        value = input(prompt).strip()
        if not value:
            print(f"{Colors.FAIL}‚ùå –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º{Colors.ENDC}")
            continue
        if allow_skip and value == "-":
            return None
        if not validator(value):
            print(f"{Colors.FAIL}‚ùå {error_msg}{Colors.ENDC}")
            continue
        return value

def get_supabase_key(key_name, min_length=32):
    for _ in range(3):
        value = input(f"{key_name} (–º–∏–Ω–∏–º—É–º {min_length} —Å–∏–º–≤–æ–ª–æ–≤): ").strip()
        if not value:
            print(f"{Colors.FAIL}‚ùå {key_name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º{Colors.ENDC}")
            continue
        if len(value) < min_length:
            print(f"{Colors.FAIL}‚ùå {key_name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º {min_length} —Å–∏–º–≤–æ–ª–æ–≤{Colors.ENDC}")
            continue
        return value
    print(f"{Colors.FAIL}‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ {key_name}{Colors.ENDC}")
    sys.exit(1)

def collect_user_inputs():
    inputs = {}
    print(f"\n{Colors.OKCYAN}{Colors.BOLD}üìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´:{Colors.ENDC}")
    print(f"{Colors.WARNING}üí° –í–≤–µ–¥–∏—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞{Colors.ENDC}\n")
    
    print(f"{Colors.OKBLUE}üîí Email –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:{Colors.ENDC}")
    print(f"{Colors.WARNING}‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π email –∞–¥—Ä–µ—Å!{Colors.ENDC}")
    print(f"{Colors.WARNING}    Let's Encrypt –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–µ–π–∫–æ–≤—ã–µ email (–Ω–∞–ø—Ä–∏–º–µ—Ä, test@test.test){Colors.ENDC}")
    inputs['email'] = get_validated_input(
        "Email –¥–ª—è Let's Encrypt: ", validate_email, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")
    
    print(f"\n{Colors.OKBLUE}üåê –î–æ–º–µ–Ω N8N (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):{Colors.ENDC}")
    inputs['n8n_domain'] = get_validated_input(
        "–î–æ–º–µ–Ω N8N (–ø—Ä–∏–º–µ—Ä: n8n.site.ru): ", validate_domain, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω")
    
    print(f"\n{Colors.OKBLUE}üåê –î–æ–º–µ–Ω Supabase (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):{Colors.ENDC}")
    inputs['supabase_domain'] = get_validated_input(
        "–î–æ–º–µ–Ω Supabase (–ø—Ä–∏–º–µ—Ä: db.site.ru): ", validate_domain, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω")
    
    print(f"\n{Colors.OKBLUE}üåê –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã (–≤–≤–µ–¥–∏—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):{Colors.ENDC}")
    
    inputs['ollama_domain'] = get_validated_input(
        "–î–æ–º–µ–Ω Ollama (–ø—Ä–∏–º–µ—Ä: ollama.site.ru) –∏–ª–∏ '-': ", 
        validate_domain, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω", allow_skip=True)
    
    inputs['webui_domain'] = get_validated_input(
        "–î–æ–º–µ–Ω WebUI (–ø—Ä–∏–º–µ—Ä: ai.site.ru) –∏–ª–∏ '-': ",
        validate_domain, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω", allow_skip=True)
    
    inputs['flowise_domain'] = get_validated_input(
        "–î–æ–º–µ–Ω Flowise (–ø—Ä–∏–º–µ—Ä: agents.site.ru) –∏–ª–∏ '-': ",
        validate_domain, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω", allow_skip=True)
    
    inputs['langfuse_domain'] = get_validated_input(
        "–î–æ–º–µ–Ω Langfuse (–ø—Ä–∏–º–µ—Ä: analytics.site.ru) –∏–ª–∏ '-': ",
        validate_domain, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω", allow_skip=True)
    
    inputs['neo4j_domain'] = get_validated_input(
        "–î–æ–º–µ–Ω Neo4j (–ø—Ä–∏–º–µ—Ä: graph.site.ru) –∏–ª–∏ '-': ",
        validate_domain, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω", allow_skip=True)
    
    print(f"\n{Colors.OKBLUE}üîê –ö–ª—é—á–∏ Supabase:{Colors.ENDC}")
    print(f"{Colors.WARNING}üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: https://supabase.com/docs/guides/self-hosting/docker#generate-api-keys{Colors.ENDC}")
    
    inputs['jwt_secret'] = get_supabase_key("JWT_SECRET", 32)
    inputs['anon_key'] = get_supabase_key("ANON_KEY", 100)
    inputs['service_role_key'] = get_supabase_key("SERVICE_ROLE_KEY", 100)
    
    return inputs

def generate_secret_key(length=32):
    return secrets.token_hex(length)

def generate_password(length=24):
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ URL –∏ –∫–æ–Ω—Ñ–∏–≥–∞—Ö
    chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!^&*"
    return ''.join(secrets.choice(chars) for _ in range(length))

def generate_all_secrets():
    return {
        'n8n_encryption_key': generate_secret_key(32),
        'n8n_jwt_secret': generate_secret_key(32),
        'postgres_password': generate_password(32),
        'dashboard_password': generate_password(24),
        'neo4j_password': generate_password(16),
        'clickhouse_password': generate_password(24),
        'minio_password': generate_password(24),
        'langfuse_salt': generate_secret_key(32),
        'nextauth_secret': generate_secret_key(32),
        'encryption_key': generate_secret_key(32),
    }

def create_env_file(user_inputs, generated_secrets):
    try:
        if os.path.exists('.env'):
            backup_name = '.env.backup'
            counter = 1
            while os.path.exists(backup_name):
                backup_name = f'.env.backup.{counter}'
                counter += 1
            os.rename('.env', backup_name)
            print(f"   üíæ –°–æ–∑–¥–∞–Ω backup: {backup_name}")
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: {e}{Colors.ENDC}")
        return False

    env_content = f"""############
# N8N Configuration
############
N8N_ENCRYPTION_KEY={generated_secrets['n8n_encryption_key']}
N8N_USER_MANAGEMENT_JWT_SECRET={generated_secrets['n8n_jwt_secret']}

############
# Supabase Secrets
############
POSTGRES_PASSWORD={generated_secrets['postgres_password']}
JWT_SECRET={user_inputs['jwt_secret']}
ANON_KEY={user_inputs['anon_key']}
SERVICE_ROLE_KEY={user_inputs['service_role_key']}
DASHBOARD_USERNAME=admin
DASHBOARD_PASSWORD={generated_secrets['dashboard_password']}
POOLER_TENANT_ID=1000

############
# Neo4j Secrets
############
NEO4J_AUTH=neo4j/{generated_secrets['neo4j_password']}

############
# Langfuse credentials
############
CLICKHOUSE_PASSWORD={generated_secrets['clickhouse_password']}
MINIO_ROOT_PASSWORD={generated_secrets['minio_password']}
LANGFUSE_SALT={generated_secrets['langfuse_salt']}
NEXTAUTH_SECRET={generated_secrets['nextauth_secret']}
ENCRYPTION_KEY={generated_secrets['encryption_key']}

############
# Caddy Config - Production domains
############
N8N_HOSTNAME={user_inputs['n8n_domain']}
SUPABASE_HOSTNAME={user_inputs['supabase_domain']}
LETSENCRYPT_EMAIL={user_inputs['email']}
"""
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    if user_inputs.get('ollama_domain'):
        env_content += f"OLLAMA_HOSTNAME={user_inputs['ollama_domain']}\n"
    else:
        env_content += f"# OLLAMA_HOSTNAME=ollama.yourdomain.com\n"
    
    if user_inputs.get('webui_domain'):
        env_content += f"WEBUI_HOSTNAME={user_inputs['webui_domain']}\n"
    else:
        env_content += f"# WEBUI_HOSTNAME=ai.yourdomain.com\n"
    
    if user_inputs.get('flowise_domain'):
        env_content += f"FLOWISE_HOSTNAME={user_inputs['flowise_domain']}\n"
    else:
        env_content += f"# FLOWISE_HOSTNAME=agents.yourdomain.com\n"
    
    if user_inputs.get('langfuse_domain'):
        env_content += f"LANGFUSE_HOSTNAME={user_inputs['langfuse_domain']}\n"
    else:
        env_content += f"# LANGFUSE_HOSTNAME=analytics.yourdomain.com\n"
    
    if user_inputs.get('neo4j_domain'):
        env_content += f"NEO4J_HOSTNAME={user_inputs['neo4j_domain']}\n"
    else:
        env_content += f"# NEO4J_HOSTNAME=graph.yourdomain.com\n"
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    env_content += f"""
############
# Database - PostgreSQL Configuration
############
POSTGRES_VERSION=16
POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_PORT=5432
POSTGRES_USER=postgres

############
# Supavisor Configuration
############
POOLER_PROXY_PORT_TRANSACTION=6543
POOLER_DEFAULT_POOL_SIZE=20
POOLER_MAX_CLIENT_CONN=100
SECRET_KEY_BASE={generate_secret_key(32)}
VAULT_ENC_KEY={generate_secret_key(16)}
POOLER_DB_POOL_SIZE=5

############
# API Proxy - Kong Configuration
############
KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443

############
# API - PostgREST Configuration
############
PGRST_DB_SCHEMAS=public,storage,graphql_public

############
# Auth - GoTrue Configuration
############
SITE_URL=http://localhost:3000
ADDITIONAL_REDIRECT_URLS=
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
API_EXTERNAL_URL=http://localhost:8000

## Mailer Config
MAILER_URLPATHS_CONFIRMATION=/auth/v1/verify
MAILER_URLPATHS_INVITE=/auth/v1/verify
MAILER_URLPATHS_RECOVERY=/auth/v1/verify
MAILER_URLPATHS_EMAIL_CHANGE=/auth/v1/verify

## Email auth
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=true
SMTP_ADMIN_EMAIL=admin@example.com
SMTP_HOST=supabase-mail
SMTP_PORT=2500
SMTP_USER=fake_mail_user
SMTP_PASS=fake_mail_password
SMTP_SENDER_NAME=fake_sender
ENABLE_ANONYMOUS_USERS=false

## Phone auth
ENABLE_PHONE_SIGNUP=true
ENABLE_PHONE_AUTOCONFIRM=true

############
# Studio Configuration
############
STUDIO_DEFAULT_ORGANIZATION=Default Organization
STUDIO_DEFAULT_PROJECT=Default Project
STUDIO_PORT=3000
SUPABASE_PUBLIC_URL=http://localhost:8000

############
# Storage
############
IMGPROXY_ENABLE_WEBP_DETECTION=true

############
# Functions
############
FUNCTIONS_VERIFY_JWT=false

############
# Logs - Analytics Configuration
############
LOGFLARE_PUBLIC_ACCESS_TOKEN={generate_secret_key(32)}
LOGFLARE_PRIVATE_ACCESS_TOKEN={generate_secret_key(32)}

############
# Docker Configuration
############
DOCKER_SOCKET_LOCATION=/var/run/docker.sock
"""

    try:
        temp_file = '.env.tmp'
        with open(temp_file, 'w') as f:
            f.write(env_content)
        os.chmod(temp_file, 0o600)
        os.rename(temp_file, '.env')
        print(f"{Colors.OKGREEN}‚úÖ –§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!{Colors.ENDC}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        enabled_services = []
        if user_inputs.get('ollama_domain'): enabled_services.append("Ollama")
        if user_inputs.get('webui_domain'): enabled_services.append("WebUI")
        if user_inputs.get('flowise_domain'): enabled_services.append("Flowise")
        if user_inputs.get('langfuse_domain'): enabled_services.append("Langfuse")
        if user_inputs.get('neo4j_domain'): enabled_services.append("Neo4j")
        
        if enabled_services:
            print(f"{Colors.OKGREEN}   –í–∫–ª—é—á–µ–Ω—ã –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {', '.join(enabled_services)}{Colors.ENDC}")
        
        return True
    except Exception as e:
        if os.path.exists(temp_file):
            os.remove(temp_file)
        print(f"{Colors.FAIL}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env: {e}{Colors.ENDC}")
        return False

def main():
    print_header()

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    if not check_system_requirements():
        print(f"\n{Colors.FAIL}‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞{Colors.ENDC}")
        sys.exit(1)

    # –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ GPU
    gpu_profile = detect_gpu_type()

    # –®–∞–≥ 3: Firewall (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
    setup_firewall()

    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    env_exists = os.path.exists('.env')
    if env_exists:
        print(f"\n{Colors.OKGREEN}‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª .env{Colors.ENDC}")
        print(f"{Colors.OKCYAN}–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?{Colors.ENDC}")
        print(f"  1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print(f"  2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç .env)")
        
        while True:
            choice = input(f"\n{Colors.BOLD}–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1/2): {Colors.ENDC}").strip()
            if choice == '1':
                print(f"{Colors.OKGREEN}‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è{Colors.ENDC}")
                break
            elif choice == '2':
                print(f"{Colors.WARNING}‚ö†Ô∏è  –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è{Colors.ENDC}")
                env_exists = False
                break
            else:
                print(f"{Colors.FAIL}‚ùå –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2{Colors.ENDC}")
    
    # –®–∞–≥ 5: –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)
    if not env_exists:
        user_inputs = collect_user_inputs()
        generated_secrets = generate_all_secrets()
        
        if not create_env_file(user_inputs, generated_secrets):
            print(f"\n{Colors.FAIL}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª{Colors.ENDC}")
            sys.exit(1)

    input(f"\n{Colors.BOLD}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...{Colors.ENDC}")

    # –®–∞–≥ 6: –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    print(f"\n{Colors.HEADER}{Colors.BOLD}{'='*65}")
    print(f"  üöÄ –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –õ.–ò.–°.–ê.")
    print(f"{'='*65}{Colors.ENDC}")
    print(f"\n{Colors.OKCYAN}üì¶ –ß—Ç–æ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:{Colors.ENDC}")
    print(f"  ‚úÖ N8N + FFmpeg - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ –º–µ–¥–∏–∞")
    print(f"  ‚úÖ Supabase - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    print(f"  ‚úÖ Ollama - LLM (–º–æ–¥–µ–ª—å llama3)")
    print(f"  ‚úÖ Whisper - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (–ø–æ—Ä—Ç 8000)")
    print(f"  ‚úÖ Open WebUI - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print(f"  ‚úÖ Flowise - –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã")
    print(f"  ‚úÖ Langfuse - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    print(f"  ‚úÖ Qdrant - –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î")
    print(f"  ‚úÖ Neo4j - –≥—Ä–∞—Ñ –ë–î")
    print(f"  ‚úÖ SearXNG - –ø–æ–∏—Å–∫")
    print(f"  ‚úÖ Caddy - SSL/TLS\n")
    
    install_cmd = f"python3 start_services.py --profile {gpu_profile} --environment public"
    print(f"{Colors.OKBLUE}üöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {install_cmd}{Colors.ENDC}\n")
    
    try:
        process = subprocess.Popen(install_cmd, shell=True)
        process.wait()
        
        if process.returncode != 0:
            print(f"\n{Colors.FAIL}‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∫–æ–¥: {process.returncode}){Colors.ENDC}")
            sys.exit(1)
            
        print(f"\n{Colors.OKGREEN}{Colors.BOLD}{'='*65}")
        print(f"  üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"{'='*65}{Colors.ENDC}")
        print(f"\n{Colors.OKCYAN}üìã –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º:{Colors.ENDC}")
        
        # –ß–∏—Ç–∞–µ–º N8N_HOSTNAME –∏–∑ .env –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        n8n_url = "http://localhost:8001"
        try:
            with open('.env', 'r') as f:
                for line in f:
                    if line.startswith('N8N_HOSTNAME='):
                        domain = line.split('=')[1].strip()
                        if domain and domain != ':8001':
                            n8n_url = f"http://localhost:8001 –∏–ª–∏ https://{domain}"
                        break
        except:
            pass
        
        print(f"  ‚Ä¢ N8N: {n8n_url}")
        print(f"  ‚Ä¢ Open WebUI: http://localhost:8002")
        print(f"  ‚Ä¢ Supabase: http://localhost:8005")
        print(f"\n{Colors.WARNING}üí° –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: —Å–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ N8N –∏ Open WebUI{Colors.ENDC}")
        print(f"{Colors.WARNING}üí° Whisper API: http://whisper:8000 (–≤–Ω—É—Ç—Ä–∏ Docker —Å–µ—Ç–∏){Colors.ENDC}\n")
        
    except Exception as e:
        print(f"\n{Colors.FAIL}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}{Colors.ENDC}")
        sys.exit(1)

if __name__ == "__main__":
    main()

